buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"

            }
        }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

//Gradle Plugins
plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'java'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    mappings channel: mapping_channel, version: mapping_version

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory = project.file('run/client')
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory = project.file('run/server')
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.vaulthunters.json"
    config "mixins.${mod_id}.experimental.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://jitpack.io' }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven { url "https://cursemaven.com" }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Curseforge mod dependencies
    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:${vault_hunters_version}")
    implementation fg.deobf("curse.maven:cooking-for-blockheads-231484:${cooking_for_blockheads_version}")
    implementation fg.deobf("curse.maven:balm-531761:${balm_version}")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:${sophisticated_core_version}")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-422301:${sophisticated_backpacks_version}")
    implementation fg.deobf("curse.maven:supplementaries-412082:${supplementaries_version}")
    implementation fg.deobf("curse.maven:selene-499980:${selene_version}")
    implementation fg.deobf("curse.maven:alexs-mobs-426558:${alexs_mobs_version}")


//    Dependencies for Runtime Debug
//    implementation fg.deobf("curse.maven:quark-243121:3840125")
//    implementation fg.deobf("curse.maven:applied-energistics-2-223794:4548560")
//    implementation fg.deobf("curse.maven:refined-storage-243076:4392829")
//    implementation fg.deobf("curse.maven:mekanism-268560:3875976")
//    implementation fg.deobf("curse.maven:simple-storage-network-268495:3868680")
//    implementation fg.deobf("curse.maven:architects-palette-433862:4498424")
//    implementation fg.deobf("curse.maven:curios-309927:4418032")
//    implementation fg.deobf("curse.maven:autoreglib-250363:3642382")
//    implementation fg.deobf("curse.maven:sophisticated-backpacks-vault-hunters-edition-696425:4287544")
//    implementation fg.deobf("curse.maven:configured-457570:4462832")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

//task signJar(type: SignJar, dependsOn: jar) {
//
//    // findProperty allows us to reference the property without it existing.
//    // Using project.propName would cause the script to fail validation if
//    // the property did not exist.
//    keyStore = project.findProperty('keyStore')
//    alias = project.findProperty('keyStoreAlias')
//    storePass = project.findProperty('keyStorePass')
//    keyPass = project.findProperty('keyStoreKeyPass')
//    inputFile = jar.archivePath
//    outputFile = jar.archivePath
//}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    //finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
